name: TeamCloud - Create Pre-release

on:
  push:
    branches: [ master ]

env:
  BUILD_CONFIGURATION: Release
  SOURCE_DIRECTORY: ./src
  
jobs:

  build:
    name: Create new Pre-release
    if: "!contains(join(github.event.commits.*.message), '+norelease')"
    runs-on: ubuntu-latest

    steps:
    
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
      
    - name: Checkout Tags
      run: git fetch -t
      
    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.2
      with:
          versionSpec: '5.x'

    - name: Execute GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.101'

    - name: Build & Package for Pre-release
      run:  dotnet build ${{ env.SOURCE_DIRECTORY }}/TeamCloud.sln -o Prerelease -c ${{ env.BUILD_CONFIGURATION }} -p:VersionPrefix="${{ steps.gitversion.outputs.majorMinorPatch }}" -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" -p:IncludeSymbols=true --version-suffix "pre"

    - name: Publish Pre-release NuGet Packages
      run: dotnet nuget push Prerelease/*.nupkg --api-key '${{ secrets.MYGET_DEV_TOKEN }}' --source 'https://www.myget.org/F/teamcloud-dev/api/v2/package' --symbol-api-key '${{ secrets.MYGET_DEV_TOKEN }}' --symbol-source 'https://www.myget.org/F/teamcloud-dev/symbols/api/v2/package' --skip-duplicate
      
    - name: Build & Package for Release
      run:  dotnet build ${{ env.SOURCE_DIRECTORY }}/TeamCloud.sln -c ${{ env.BUILD_CONFIGURATION }} -p:VersionPrefix="${{ steps.gitversion.outputs.majorMinorPatch }}" -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" -p:IncludeSymbols=true

    - name: Create NuGet Release Asset
      run: zip -r -j NuGet.zip src -i '*.nupkg' 

    - name: Create TeamCloud.API Release Asset
      run: |
        dotnet publish ${{ env.SOURCE_DIRECTORY }}/TeamCloud.API/TeamCloud.API.csproj -o TeamCloud.API -c ${{ env.BUILD_CONFIGURATION }} -p:VersionPrefix="${{ steps.gitversion.outputs.majorMinorPatch }}" -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" -p:IncludeSymbols=true --no-build

        pushd TeamCloud.API
          zip -r ../TeamCloud.API.zip *
        popd

    - name: Create TeamCloud.Orchestrator Release Asset
      run: |
        dotnet publish ${{ env.SOURCE_DIRECTORY }}/TeamCloud.Orchestrator/TeamCloud.Orchestrator.csproj -o TeamCloud.Orchestrator -c ${{ env.BUILD_CONFIGURATION }} -p:VersionPrefix="${{ steps.gitversion.outputs.majorMinorPatch }}" -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" -p:IncludeSymbols=true --no-build
        
        pushd TeamCloud.Orchestrator
          zip -r ../TeamCloud.Orchestrator.zip *
        popd
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: 'v${{ steps.gitversion.outputs.majorMinorPatch }}'
        release_name: 'v${{ steps.gitversion.outputs.majorMinorPatch }}-pre'
        body: 'Pre-release build.'
        prerelease: true

    - name: Upload NuGet Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: NuGet.zip
        asset_name: NuGet.zip
        asset_content_type: application/zip
      
    - name: Upload TeamCloud.API Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: TeamCloud.API.zip
        asset_name: TeamCloud.API.zip
        asset_content_type: application/zip

    - name: Upload TeamCloud.Orchestrator Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: TeamCloud.Orchestrator.zip
        asset_name: TeamCloud.Orchestrator.zip
        asset_content_type: application/zip